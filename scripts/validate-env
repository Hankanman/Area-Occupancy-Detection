#!/usr/bin/env python3
"""Validate that local environment matches CI environment."""

from pathlib import Path
import platform
import subprocess
import sys


def check_python_version():
    """Check Python version matches CI."""
    expected_version = "3.13"
    current_version = f"{sys.version_info.major}.{sys.version_info.minor}"

    if current_version != expected_version:
        print(f"‚ùå Python version mismatch: {current_version} != {expected_version}")
        return False

    print(f"‚úÖ Python version: {current_version}")
    return True


def check_dependencies():
    """Check that key dependencies match expected versions."""
    expected_deps = {
        "pytest": "8.3.5",
        "pytest-asyncio": "0.26.0",
        "pytest-homeassistant-custom-component": "0.13.254",
    }

    all_good = True
    for package, expected_version in expected_deps.items():
        try:
            if package == "pytest-homeassistant-custom-component":
                # Special handling for this package - use pip show
                result = subprocess.run(
                    ["pip", "show", package], capture_output=True, text=True, check=True
                )
                # Extract version from pip show output
                for line in result.stdout.split("\n"):
                    if line.startswith("Version: "):
                        actual_version = line.split(": ")[1]
                        break
                else:
                    raise subprocess.CalledProcessError(1, ["pip", "show", package])
            else:
                result = subprocess.run(
                    [
                        sys.executable,
                        "-c",
                        f"import {package.replace('-', '_')}; print({package.replace('-', '_')}.__version__)",
                    ],
                    capture_output=True,
                    text=True,
                    check=True,
                )
                actual_version = result.stdout.strip()

            if actual_version != expected_version:
                print(f"‚ùå {package}: {actual_version} != {expected_version}")
                all_good = False
            else:
                print(f"‚úÖ {package}: {actual_version}")

        except (subprocess.CalledProcessError, ImportError):
            print(f"‚ùå {package}: not installed")
            all_good = False

    return all_good


def check_pytest_config():
    """Check pytest configuration."""
    config_file = Path("pyproject.toml")

    if not config_file.exists():
        print("‚ùå pyproject.toml not found")
        return False

    content = config_file.read_text()

    # Check for critical config
    checks = [
        ('asyncio_mode = "auto"', "pytest asyncio mode"),
        ("filterwarnings = [", "warning filters configured"),
        ('testpaths = ["tests"]', "test paths configured"),
    ]

    all_good = True
    for check, description in checks:
        if check in content:
            print(f"‚úÖ {description}")
        else:
            print(f"‚ùå {description} missing")
            all_good = False

    return all_good


def main():
    """Run all validation checks."""
    print("üîç Validating local environment against CI...")
    print(f"Platform: {platform.system()} {platform.release()}")
    print()

    checks = [check_python_version(), check_dependencies(), check_pytest_config()]

    if all(checks):
        print("\n‚úÖ Environment validation passed!")
        return 0
    else:
        print("\n‚ùå Environment validation failed!")
        print("\nTo fix:")
        print("1. Use Python 3.13")
        print("2. Run: pip install -r requirements_test.txt")
        print("3. Check pyproject.toml configuration")
        return 1


if __name__ == "__main__":
    sys.exit(main())
