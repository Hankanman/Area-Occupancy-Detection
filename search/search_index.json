{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Area Occupancy Detection Documentation","text":"<p>Area Occupancy Detection aims to improve occupancy accuracy beyond single motion detectors by considering various environmental factors, device states, and historical data. It uses Bayesian probability to calculate the likelihood of an area being occupied based on multiple sensor inputs and learned patterns.</p> <p></p>"},{"location":"#features","title":"Features","text":""},{"location":"#core-features","title":"Core Features","text":"<ul> <li>Bayesian Probability Calculation: Uses learned sensor reliability to calculate occupancy probability</li> <li>Historical Learning: Automatically learns from your sensor history to improve accuracy</li> <li>Probability Decay: Gradually reduces probability when no activity is detected</li> <li>Multiple Sensor Types: Supports motion, media, door, window, appliance, and environmental sensors</li> <li>Wasp in Box: Special logic for rooms with single entry/exit points</li> </ul>"},{"location":"#advanced-features","title":"Advanced Features","text":"<ul> <li>Sensor Likelihoods: Learns how reliable each sensor is for occupancy detection</li> <li>Purpose-Based Configuration: Automatic configuration based on room purpose</li> </ul>"},{"location":"#user-interface","title":"User Interface","text":"<ul> <li>Services: Available service calls for automation and control</li> <li>Entities: Created entities and their attributes</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<ul> <li>Installation Guide: How to install the integration via HACS or manual installation</li> </ul>"},{"location":"#configuration","title":"Configuration","text":"<ul> <li>Configuration Guide: Step-by-step configuration instructions</li> <li>Basic Usage: How to use the integration after setup</li> </ul>"},{"location":"#key-concepts","title":"Key Concepts","text":""},{"location":"#bayesian-probability","title":"Bayesian Probability","text":"<p>The integration uses Bayes' theorem to update occupancy probability based on sensor evidence:</p> <ol> <li>Prior Belief: Baseline probability of occupancy (learned from history)</li> <li>Sensor Evidence: Current state of configured sensors</li> <li>Likelihood: How reliable each sensor is (learned from history)</li> <li>Posterior: Updated probability after considering new evidence</li> </ol>"},{"location":"#sensor-types","title":"Sensor Types","text":"<p>The integration supports multiple sensor types with different default weights:</p> <ul> <li>Motion Sensors (1.00): High reliability for occupancy detection</li> <li>Media Devices (0.70): Good indicator of active use</li> <li>Appliances (0.40): Moderate reliability</li> <li>Door Sensors (0.30): Lower reliability, but useful for entry/exit</li> <li>Window Sensors (0.20): Minimal influence</li> <li>Environmental (0.10): Very low influence</li> </ul>"},{"location":"#example-use-cases","title":"Example Use Cases","text":""},{"location":"#living-room","title":"Living Room","text":"<ul> <li>Sensors: Motion sensors, TV, door sensors</li> <li>Patterns: High occupancy in evenings, low during work hours</li> <li>Automation: Turn on lights when occupied, dim when low probability</li> </ul>"},{"location":"#office","title":"Office","text":"<ul> <li>Sensors: Motion sensors, computer, door sensors</li> <li>Patterns: High occupancy during work hours, low on weekends</li> <li>Automation: Turn on/off lights based on occupancy, adjust HVAC</li> </ul>"},{"location":"#bathroom","title":"Bathroom","text":"<ul> <li>Sensors: Motion sensors, door sensors</li> <li>Wasp in Box: Maintain occupancy when door is closed</li> <li>Automation: Turn on lights when occupied, turn off when unoccupied</li> </ul>"},{"location":"#challenges-with-basic-motion-sensors","title":"Challenges with Basic Motion Sensors","text":"<ul> <li>Lights turning off while you're still: If you sit still for too long, a basic motion sensor assumes the room is empty.</li> <li>False triggers: A pet walking through might trigger occupancy.</li> <li>Limited context: Simple motion doesn't know if you're watching TV, working at a desk, or just passing through.</li> </ul>"},{"location":"#how-area-occupancy-detection-helps","title":"How Area Occupancy Detection Helps","text":"<p>This integration provides enhanced room occupancy detection for Home Assistant by intelligently combining data from multiple sensor inputs. Unlike simple motion sensors, it leverages Bayesian probability calculations to factor in various environmental cues and device states, leading to more accurate and resilient occupancy detection.</p> <ul> <li>Increased Accuracy: By fusing data from multiple sensor types (motion, doors, media, etc.), the system gains a much richer understanding of the area's status.</li> <li>Probabilistic Approach: Instead of a simple ON/OFF state, it calculates an occupancy probability. You decide how certain the system must be before declaring occupancy.</li> <li>Adaptability: The prior probability learning feature analyses how your sensors correlate with actual occupancy, learning which sensors are reliable indicators.</li> <li>Reduced False Negatives/Positives: The combination of multi-sensor input, learned probabilities and decay logic significantly reduces incorrect occupancy states.</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Multi-Sensor Fusion: Combines inputs from motion/occupancy sensors, media players, doors, windows, appliances and environmental sensors (temperature, humidity, illuminance).</li> <li>Bayesian Inference: Calculates the probability of occupancy based on the current state of configured sensors and their individual learned likelihoods.</li> <li>Prior Probability Learning: Automatically learns how sensor states relate to actual occupancy (using a primary sensor as ground truth) over a configurable history period.</li> <li>Configurable Weights: Assign weights to different sensor types to influence their impact on the overall probability.</li> <li>Probability Decay: Gradually decreases the occupancy probability when sensors indicate inactivity, providing a natural transition to \"unoccupied\".</li> <li>Purpose-Based Decay: Choosing a room purpose automatically sets a decay half life suited to the space.</li> <li>Configurable Threshold: Define the probability percentage required to consider the area \"occupied\".</li> <li>Exposed Entities:</li> <li>Occupancy Probability Sensor (%)</li> <li>Occupancy Status Binary Sensor (on/off)</li> <li>Prior Probability Sensor (%)</li> <li>Evidence Sensor</li> <li>Decay Status Sensor (%)</li> <li>Occupancy Threshold Number Input</li> <li>UI Configuration: Easy setup and management through the Home Assistant UI.</li> <li>Manual Prior Update Service: Trigger the prior learning process on demand.</li> </ul>"},{"location":"#how-it-works","title":"How It Works","text":"<ol> <li>Configuration: You select various sensors associated with an area (motion, doors, media players, etc.) and configure parameters like weights and the history period for learning.</li> <li>Prior Learning: The integration analyses the history of your selected sensors against a designated primary motion/occupancy sensor. It calculates:<ul> <li>P(Sensor Active | Area Occupied): How likely is a sensor to be active when the area is truly occupied?</li> <li>P(Sensor Active | Area Not Occupied): How likely is a sensor to be active when the area is not occupied?</li> <li>P(Area Occupied): The baseline (prior) probability of the area being occupied, derived from the primary sensor's history.   These learned probabilities (or defaults if history is insufficient) are stored and used in calculations.</li> </ul> </li> <li>Real-time Calculation: As your sensor states change, the integration uses Bayes' theorem. For each active sensor, it updates the probability of occupancy based on its learned likelihoods and the overall prior probability.</li> <li>Weighted Combination: The contributions from individual active sensors are combined in log space and weighted by sensor type.</li> <li>Output: The final calculated probability is exposed. If it crosses the configured threshold, the Occupancy Status sensor turns \"on\".</li> <li>Decay: If the probability starts decreasing (fewer active sensors), an exponential decay function gradually lowers the probability over a configured time window, unless new sensor activity pushes it back up.</li> </ol>"},{"location":"#common-issues","title":"Common Issues","text":"<ol> <li> <p>No Occupancy Detection:</p> </li> <li> <p>Verify sensors are working correctly</p> </li> <li>Check threshold setting</li> <li>Ensure sensors are properly configured</li> <li> <p>Adjust sensor weights</p> </li> <li> <p>False Positives:</p> </li> <li> <p>Lower weights for less reliable sensors</p> </li> <li>Increase occupancy threshold</li> <li>Adjust decay settings</li> <li> <p>Review time-based priors</p> </li> <li> <p>False Negatives:</p> </li> <li>Increase weights for reliable sensors</li> <li>Lower occupancy threshold</li> <li>Add additional sensors</li> <li>Check time-based prior patterns</li> </ol>"},{"location":"#support","title":"Support","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Community Discussion: Ask questions and share experiences</li> <li>GitHub Releases: Check for updates and changelog</li> </ul>"},{"location":"features/calculation/","title":"Bayesian Probability Calculation","text":"<p>This integration uses Bayesian probability to determine the likelihood of an area being occupied based on the current states of configured sensors.</p>"},{"location":"features/calculation/#core-concept","title":"Core Concept","text":"<p>Instead of a simple binary \"motion detected = occupied\" logic, this integration calculates a probability score (0% to 100%) representing the confidence that the area is occupied.</p>"},{"location":"features/calculation/#calculation-steps","title":"Calculation Steps","text":"<ol> <li>Collect Evidence: Each configured entity reports whether it currently provides evidence of occupancy. Entities that are decaying after recent activity are also treated as evidence.</li> <li>Determine Priors: The integration combines the area prior (learned from history) with a time-based prior to form a baseline probability using a weighted average in logit space.</li> <li>Adjust Likelihoods: For each entity, the learned likelihoods <code>P(Active | Occupied)</code> and <code>P(Active | Not Occupied)</code> are adjusted for any active decay to reduce the strength of stale evidence.</li> <li>Log-Space Combination: The calculation is performed in log space for numerical stability. For each entity the log probabilities for the \"occupied\" and \"not occupied\" hypotheses are accumulated and weighted according to the entity type's configured weight.</li> <li>Final Probability: The log probabilities are exponentiated and normalised to produce the final occupancy probability.</li> </ol>"},{"location":"features/calculation/#output","title":"Output","text":"<p>The result of this calculation is shown by the Occupancy Probability sensor.</p> <p>The Occupancy Status binary sensor compares this probability to the configured Occupancy Threshold to determine its <code>on</code> or <code>off</code> state.</p>"},{"location":"features/calculation/#the-maths","title":"The Maths","text":"<p>The algorithm operates in log space. For each entity, the effective likelihoods (<code>p_t</code> for occupied, <code>p_f</code> for not occupied) are clamped to avoid extremes. These values are logged and multiplied by the entity's weight:</p> <p>[ \\log P(O|E) = \\log P(O) + \\sum (\\log p_t \\times w) ] [ \\log P(\\neg O|E) = \\log(1-P(O)) + \\sum (\\log p_f \\times w) ]</p> <p>where \\(w\\) is the weight for the entity type. The final probability is then:</p> \\[ P(O|E) = \\frac{e^{\\log P(O|E)}}{e^{\\log P(O|E)} + e^{\\log P(\\neg O|E)}} \\]"},{"location":"features/calculation/#decay-calculation","title":"Decay Calculation","text":"<p>When Probability Decay is active, likelihoods are interpolated between their learned values and neutral probabilities based on the decay factor. This reduces the influence of old evidence until it expires.</p>"},{"location":"features/decay/","title":"Probability Decay","text":"<p>To prevent the occupancy status from flickering <code>off</code> the instant sensors become inactive (e.g., if you sit still for a moment), the integration includes a probability decay mechanism.</p>"},{"location":"features/decay/#purpose","title":"Purpose","text":"<p>The decay feature provides a smoother transition from an occupied state to an unoccupied state. When sensor activity ceases or suggests the area might be becoming vacant, the calculated Occupancy Probability doesn't immediately drop. Instead, it gradually decreases over a configured time window.</p>"},{"location":"features/decay/#how-decay-works","title":"How Decay Works","text":"<ol> <li>Trigger Condition: Decay starts only when the calculated occupancy probability (based on currently active sensors) decreases compared to the previous calculation cycle.</li> <li>Decay Start: When a decrease is detected:<ul> <li>The system notes the current time (<code>decay_start_time</code>).</li> <li>It records the probability value before the decrease (<code>decay_start_probability</code>). This value serves as the starting point for the decay curve.</li> <li>The Decay Status sensor likely becomes active (showing &gt; 0%).</li> </ul> </li> <li>Exponential Decay: As time passes from <code>decay_start_time</code>, the system calculates a decay factor based on an exponential function. The rate of decay is determined by the configured Decay Half Life and an internal decay constant (<code>DECAY_LAMBDA</code>). A shorter half life results in faster decay.</li> <li>Applying Decay: The calculated decay factor is applied to the <code>decay_start_probability</code>. This results in a potentially lower probability value.</li> <li>Floor Value: Importantly, the decayed probability can never go below the probability currently being calculated based on any sensors that are still active. If, during decay, a sensor reactivates and pushes the calculated probability up, that new higher value becomes the floor.</li> <li>Decay Stops When:<ul> <li>The calculated occupancy probability (based on sensor states) increases or stays the same. The decay state is reset.</li> <li>The decayed probability reaches the defined minimum probability (e.g., 1%). The probability stays at the minimum, and the decay state is reset.</li> </ul> </li> </ol>"},{"location":"features/decay/#configuration","title":"Configuration","text":"<ul> <li>Decay Enabled: A toggle to turn the decay feature on or off entirely.</li> <li>Decay Half Life (seconds): The time for the probability to fall to half of its starting value when no new activity occurs. For example, a 300-second half life means the probability halves every 5 minutes (it may stop earlier if activity resumes).</li> </ul> <p>Note: The previous Decay Minimum Delay option has been removed in version 9.2. Any existing configurations are updated automatically during migration.</p>"},{"location":"features/decay/#output","title":"Output","text":"<ul> <li>The Occupancy Probability sensor reflects the decayed value when decay is active.</li> <li>The Decay Status sensor indicates the progress of the decay, likely as a percentage (0% when not decaying, increasing towards 100% as decay progresses towards the minimum probability). Note: The exact representation might vary; check the sensor's state in your HA instance. </li> </ul>"},{"location":"features/entities/","title":"Entities","text":"<p>This integration creates several entities in Home Assistant to expose the calculated data and allow control.</p>"},{"location":"features/entities/#primary-entities","title":"Primary Entities","text":"<ul> <li> <p><code>binary_sensor.area_occupancy_status_&lt;area_name&gt;</code> (Occupancy Status)</p> <ul> <li>State: <code>on</code> / <code>off</code></li> <li>Description: This is the main occupancy output. It turns <code>on</code> if the Occupancy Probability is greater than or equal to the Occupancy Threshold, and <code>off</code> otherwise.</li> <li>Icon: Changes based on state (<code>mdi:home-account</code> for <code>on</code>, <code>mdi:home-outline</code> for <code>off</code>).</li> <li>Device Class: <code>occupancy</code></li> </ul> </li> <li> <p><code>sensor.area_occupancy_probability_&lt;area_name&gt;</code> (Occupancy Probability)</p> <ul> <li>State: Numeric value (0.0 to 100.0)</li> <li>Unit: <code>%</code></li> <li>Description: Shows the current calculated Bayesian probability that the area is occupied. This value incorporates sensor inputs, learned priors, weights, and decay (if active).</li> <li>Device Class: <code>power_factor</code> (used for % display)</li> <li>State Class: <code>measurement</code></li> <li>Attributes:<ul> <li><code>type_probabilities</code>: Mapping of each sensor type to its individual occupancy probability contribution.</li> </ul> </li> </ul> </li> <li> <p><code>number.area_occupancy_threshold_&lt;area_name&gt;</code> (Occupancy Threshold)</p> <ul> <li>State: Numeric value (configurable range, typically 1-99)</li> <li>Unit: <code>%</code></li> <li>Description: Allows you to adjust the probability threshold required for the Occupancy Status binary sensor to turn <code>on</code>. Changes made here are reflected immediately in the binary sensor's state.</li> <li>Mode: <code>slider</code> or <code>box</code> (depends on HA frontend)</li> </ul> </li> </ul>"},{"location":"features/entities/#diagnostic-entities","title":"Diagnostic Entities","text":"<p>These entities provide insight into the internal calculations and are useful for tuning and debugging.</p> <ul> <li> <p><code>sensor.area_prior_probability_&lt;area_name&gt;</code> (Prior Probability)</p> <ul> <li>State: Numeric value (0.0 to 100.0)</li> <li>Unit: <code>%</code></li> <li>Description: Shows the combined prior probability used for occupancy calculations.</li> <li>Device Class: <code>power_factor</code></li> <li>State Class: <code>measurement</code></li> <li>Entity Category: <code>diagnostic</code></li> <li>Attributes:<ul> <li><code>global_prior</code>: Baseline prior derived from historical analysis.</li> <li><code>time_prior</code>: Time-based modifier applied to the prior.</li> <li><code>day_of_week</code>: Day-of-week index used for time prior.</li> <li><code>time_slot</code>: Time slot index used for time prior.</li> </ul> </li> </ul> </li> <li> <p><code>sensor.area_evidence_&lt;area_name&gt;</code> (Evidence)</p> <ul> <li>State: Number of entities currently managed</li> <li>Description: Lists entities providing evidence and those that are inactive.</li> <li>Entity Category: <code>diagnostic</code></li> <li>Attributes:<ul> <li><code>evidence</code>: Comma-separated list of active entity names.</li> <li><code>no_evidence</code>: Comma-separated list of inactive entity names.</li> <li><code>total</code>: Total number of entities.</li> <li><code>details</code>: Detailed information for each entity including probabilities and decay status.</li> </ul> </li> </ul> </li> <li> <p><code>sensor.area_decay_status_&lt;area_name&gt;</code> (Decay Status)</p> <ul> <li>State: Numeric value (0.0 to 100.0)</li> <li>Unit: <code>%</code></li> <li>Description: Indicates the progress of the probability decay when active. <code>0.0</code> means decay is not active. A value increasing towards <code>100.0</code> suggests decay is in progress. (100% likely corresponds to reaching the minimum probability limit or the configured decay window duration).</li> <li>Device Class: <code>power_factor</code></li> <li>State Class: <code>measurement</code></li> <li>Entity Category: <code>diagnostic</code></li> <li>Attributes: (May include details like <code>decay_start_time</code>, <code>decay_start_probability</code> - check the entity state in Developer Tools for specifics). </li> </ul> </li> </ul>"},{"location":"features/likelihood/","title":"Sensor Likelihoods","text":"<p>Each sensor has two learned values that describe how reliable it is as evidence of occupancy:</p> <ul> <li>P(Active | Occupied) \u2013 how often the sensor is active when the area really is occupied.</li> <li>P(Active | Not Occupied) \u2013 how often the sensor is active when the area is not occupied.</li> </ul> <p>These values are called likelihoods and are calculated from your history data during the Prior Learning process. They are weighted according to the sensor type and used by the Bayesian calculation to update the occupancy probability whenever that sensor is active.</p> <p>If history based learning is disabled, or insufficient history is available, default likelihoods from the integration are used instead.</p> <p>You can manually refresh the stored likelihoods by calling the <code>area_occupancy.run_analysis</code> service.</p>"},{"location":"features/prior-learning/","title":"Prior Probability Learning","text":"<p>To make the Bayesian calculations more accurate and specific to your environment, the integration automatically learns key probability values from your sensor history. This process adapts the system to how you actually use the space.</p>"},{"location":"features/prior-learning/#what-is-a-prior-probability","title":"What is a Prior Probability?","text":"<p>In the context of Bayesian probability, the prior probability (often denoted as <code>P(Occupied)</code> or simply <code>prior</code>) represents our initial belief about the likelihood of an event before considering any new evidence. For this integration, it's the baseline probability that the area is occupied, independent of the current state of the sensors.</p> <p>Think of it as the starting point for the calculation. When new sensor evidence comes in (e.g., motion is detected), Bayes' theorem uses this prior belief along with the sensor's learned likelihoods to calculate an updated belief (the posterior probability).</p> <p>Initially, the integration uses default prior values. However, the Prior Learning process aims to calculate a more accurate prior based on the historical behavior of your Primary Occupancy Sensor, reflecting how often that area is typically occupied according to your chosen ground truth sensor.</p>"},{"location":"features/prior-learning/#global-prior-learning","title":"Global Prior Learning","text":"<p>The traditional approach calculates a single baseline prior probability for the entire area, regardless of time. This is the foundation of the learning system and provides a good baseline for occupancy detection.</p>"},{"location":"features/prior-learning/#goal-of-learning","title":"Goal of Learning","text":"<p>The primary goal is to determine, for each configured sensor:</p> <ol> <li><code>P(Sensor Active | Area Occupied)</code> (Likelihood - True): How likely is this sensor to be in its \"active\" state when the area is genuinely occupied?</li> <li><code>P(Sensor Active | Area Not Occupied)</code> (Likelihood - False): How likely is this sensor to be in its \"active\" state when the area is not occupied? (This helps identify sensors that trigger falsely or independently of occupancy).</li> <li><code>P(Sensor Occupied)</code> (Prior): What is the baseline probability that this sensor is active, based on its history? (This is particularly relevant for the primary sensor, which informs the overall prior).</li> </ol>"},{"location":"features/prior-learning/#the-primary-sensors-ground-truth","title":"The Primary Sensor(s): Ground Truth","text":"<p>This learning process relies heavily on the Primary Occupancy Sensor you designate during configuration. This sensor (usually a reliable motion or dedicated occupancy sensor) is treated as the \"ground truth\" indicator of when the area was actually occupied during the historical analysis period.</p>"},{"location":"features/prior-learning/#how-learning-works","title":"How Learning Works","text":""},{"location":"features/prior-learning/#global-prior-learning-process","title":"Global Prior Learning Process","text":"<ol> <li>Time Period: The system looks back over the configured History Period (e.g., the last 7 days) using the Home Assistant recorder database.</li> <li>Data Retrieval: For the specified period, it fetches the state history for both the Primary Occupancy Sensor and the specific sensor being analyzed.</li> <li>Interval Analysis: The state histories are converted into time intervals, noting the start and end times for each state (e.g., when a sensor turned <code>on</code> and then <code>off</code>).</li> <li>Correlation Calculation: The system compares the time intervals of the sensor being analyzed with the intervals when the Primary Occupancy Sensor was <code>on</code> (considered occupied) and <code>off</code> (considered not occupied):<ul> <li>Calculate <code>P(Active | Occupied)</code>: It measures the total duration the sensor was active during the times the primary sensor indicated the area was occupied. This duration is divided by the total time the area was considered occupied.</li> <li>Calculate <code>P(Active | Not Occupied)</code>: It measures the total duration the sensor was active during the times the primary sensor indicated the area was not occupied. This duration is divided by the total time the area was considered not occupied.</li> <li>Calculate <code>P(Occupied)</code> (Prior): For the primary sensor itself, its prior is calculated as the total time it was <code>on</code> divided by the total analysis period duration. For other sensors, their individual priors are also calculated based on their own total active time.</li> </ul> </li> <li>Storage: These learned <code>prob_given_true</code>, <code>prob_given_false</code>, and <code>prior</code> values are stored persistently for each sensor. They override the default probabilities defined in the integration's constants.</li> <li>Averaging for Type Priors: The learned priors for individual entities are averaged to calculate priors for each sensor type (e.g., the average prior for all configured motion sensors).</li> <li>Overall Prior: The overall prior probability for the area (used in the main Bayesian calculation and shown by the Prior Probability sensor) is calculated by averaging the priors of the active sensor types.</li> </ol>"},{"location":"features/prior-learning/#when-learning-occurs","title":"When Learning Occurs","text":""},{"location":"features/prior-learning/#global-prior-learning_1","title":"Global Prior Learning","text":"<ul> <li>Automatically: This learning process typically runs automatically in the background at a set interval (e.g., once per hour, though this might be configurable or dynamically adjusted).</li> <li>Manually: You can trigger the learning process immediately using the <code>area_occupancy.run_analysis</code> service call.</li> <li>Startup: It may also run on Home Assistant startup or when the integration is first set up, especially if no prior learned data exists.</li> </ul>"},{"location":"features/prior-learning/#using-learned-priors","title":"Using Learned Priors","text":"<p>Once calculated, these learned priors are used by the Bayesian Probability Calculation instead of the generic defaults, making the occupancy detection tailored to the specific behavior of sensors in that area.</p>"},{"location":"features/purpose/","title":"Area Purpose and Decay Behaviour","text":"<p>The integration lets you assign an Area Purpose to each instance. The purpose describes how the room is typically used and determines a sensible default for the probability decay speed.</p> <p>Selecting a purpose automatically sets the Decay Half Life \u2013 the time it takes for the occupancy probability to halve when no new activity occurs. You can still override this value in the options flow if required.</p> Purpose Description Default Half Life (s) Passageway Short transit spaces such as hallways or landings. Evidence fades very quickly. 60 Utility Functional rooms like laundries or boot rooms. 120 Food\u2011Prep Kitchen work zones. 300 Eating Dining or breakfast areas. 600 Working / Studying Offices or desks. 600 Social Living rooms or play areas. 720 Relaxing Lounges or reading nooks. 900 Sleeping Bedrooms and similar spaces. 1800 <p>The chosen purpose does not directly alter the Bayesian calculation beyond this decay timing. A shorter half life causes the probability to drop faster after activity stops; a longer half life keeps the area marked as occupied for longer.</p>"},{"location":"features/services/","title":"Services","text":"<p>The Area Occupancy Detection integration provides services that can be called from automations or scripts.</p>"},{"location":"features/services/#area_occupancyrun_analysis","title":"<code>area_occupancy.run_analysis</code>","text":"<p>Runs the historical analysis process for an Area Occupancy instance. This imports recent state data from the recorder, updates priors and likelihoods, and refreshes the coordinator.</p> Parameter Required Description Example Value <code>entry_id</code> Yes The configuration entry ID for the Area Occupancy instance. <code>a1b2c3d4e5f6...</code> <p>Example: <pre><code>service: area_occupancy.run_analysis\ndata:\n  entry_id: your_config_entry_id_here\n</code></pre></p> <p>Returns: - <code>area_name</code>: Name of the area - <code>current_prior</code>: Current global prior probability - <code>global_prior</code>: Global prior after analysis - <code>time_prior</code>: Time-based prior used in calculations - <code>prior_entity_ids</code>: List of entities included in analysis - <code>total_entities</code>: Total number of entities - <code>entity_states</code>: Current states of all entities - <code>likelihoods</code>: Updated likelihood data per entity - <code>update_timestamp</code>: ISO timestamp of when the analysis completed</p>"},{"location":"features/services/#area_occupancyreset_entities","title":"<code>area_occupancy.reset_entities</code>","text":"<p>Resets all entity probabilities and learned data for a specific Area Occupancy instance.</p> Parameter Required Description Example Value <code>entry_id</code> Yes The configuration entry ID for the Area Occupancy instance. <code>a1b2c3d4e5f6...</code> <p>Example: <pre><code>service: area_occupancy.reset_entities\ndata:\n  entry_id: your_config_entry_id_here\n</code></pre></p>"},{"location":"features/services/#area_occupancyget_entity_metrics","title":"<code>area_occupancy.get_entity_metrics</code>","text":"<p>Returns basic metrics about entities in the Area Occupancy instance. This service returns data and can be used for monitoring and diagnostics.</p> Parameter Required Description Example Value <code>entry_id</code> Yes The configuration entry ID for the Area Occupancy instance. <code>a1b2c3d4e5f6...</code> <p>Example: <pre><code>service: area_occupancy.get_entity_metrics\ndata:\n  entry_id: your_config_entry_id_here\n</code></pre></p> <p>Returns: - <code>metrics</code>: Object containing:   - <code>total_entities</code>: Total number of entities   - <code>active_entities</code>: Number of entities currently providing evidence   - <code>available_entities</code>: Number of available entities   - <code>unavailable_entities</code>: Number of unavailable entities   - <code>decaying_entities</code>: Number of entities currently in decay state   - <code>availability_percentage</code>: Percentage of entities available   - <code>activity_percentage</code>: Percentage of entities active   - <code>summary</code>: Human readable summary of metrics</p>"},{"location":"features/services/#area_occupancyget_problematic_entities","title":"<code>area_occupancy.get_problematic_entities</code>","text":"<p>Identifies entities that may need attention, such as unavailable entities or those with stale updates. This service returns data for troubleshooting purposes.</p> Parameter Required Description Example Value <code>entry_id</code> Yes The configuration entry ID for the Area Occupancy instance. <code>a1b2c3d4e5f6...</code> <p>Example: <pre><code>service: area_occupancy.get_problematic_entities\ndata:\n  entry_id: your_config_entry_id_here\n</code></pre></p> <p>Returns: - <code>problems</code>: Object containing:   - <code>unavailable</code>: List of entity IDs that are currently unavailable   - <code>stale_updates</code>: List of entity IDs that haven't been updated in over an hour   - <code>total_problems</code>: Count of unavailable and stale entities   - <code>summary</code>: Human readable summary of issues</p>"},{"location":"features/services/#area_occupancyget_area_status","title":"<code>area_occupancy.get_area_status</code>","text":"<p>Returns the current occupancy status and confidence level for the area, along with entity metrics for context.</p> Parameter Required Description Example Value <code>entry_id</code> Yes The configuration entry ID for the Area Occupancy instance. <code>a1b2c3d4e5f6...</code> <p>Example: <pre><code>service: area_occupancy.get_area_status\ndata:\n  entry_id: your_config_entry_id_here\n</code></pre></p> <p>Returns: - <code>area_status</code>: Object containing:   - <code>area_name</code>: Name of the area   - <code>occupied</code>: Boolean indicating if area is currently occupied   - <code>occupancy_probability</code>: Current probability of occupancy (0.0-1.0)   - <code>area_baseline_prior</code>: The baseline prior probability   - <code>confidence_level</code>: Text description of confidence   - <code>confidence_description</code>: Detailed description of confidence level   - <code>entity_summary</code>: Counts of total, active, available, unavailable and decaying entities   - <code>status_summary</code>: Human readable summary of the area state</p> <p>Notes: - Services that return response data: <code>run_analysis</code>, <code>get_entity_metrics</code>, <code>get_problematic_entities</code>, and <code>get_area_status</code> all return nested objects (see Returns sections above for structure). - The <code>reset_entities</code> service does not return response data. - Services that query historical data (<code>run_analysis</code>) can be resource-intensive. - The <code>entry_id</code> can be found in Home Assistant under Settings \u2192 Devices &amp; Services \u2192 Area Occupancy Detection \u2192 (click on an instance).</p>"},{"location":"features/wasp-in-box/","title":"Wasp in Box","text":"<p>The \"Wasp in Box\" feature provides enhanced occupancy detection for rooms with a single entry/exit point (like bathrooms, closets, or small offices). It uses a simple but effective principle: if someone enters a room and the door closes, they remain in that room until the door opens again.</p>"},{"location":"features/wasp-in-box/#concept","title":"Concept","text":"<p>The feature is named after the concept of a wasp trapped in a box - once inside, it remains there until an opening appears. Similarly, once a person enters a closed space, they must be considered \"present\" until they exit through the door.</p>"},{"location":"features/wasp-in-box/#core-principles","title":"Core Principles","text":"<p>The sensor implements three fundamental rules:</p> <ol> <li>ANY door opening releases occupancy - The \"wasp\" can escape through any available exit</li> <li>ALL doors must be closed for occupancy - The \"box\" must be sealed to trap the \"wasp\"</li> <li>ANY motion indicates presence - Even a single motion sensor detecting movement confirms the \"wasp\" is present</li> </ol>"},{"location":"features/wasp-in-box/#logic-flow-chart","title":"Logic Flow Chart","text":"<p>The following diagram shows how the sensor processes events and makes occupancy decisions:</p> <pre><code>flowchart TD\n    Start([\"Event Received\"]) --&gt; EventType{\"Event Type?\"}\n    EventType -- Door Event --&gt; DoorChange[\"Door State Changed\"]\n    EventType -- Motion Event --&gt; MotionChange[\"Motion State Changed\"]\n    DoorChange --&gt; UpdateDoorAgg[\"Calculate Aggregate Door State&lt;br&gt;ANY door open = OPEN&lt;br&gt;ALL doors closed = CLOSED\"]\n    UpdateDoorAgg --&gt; CheckDoorOpen{\"Aggregate Door&lt;br&gt;State = OPEN?\"}\n    CheckDoorOpen -- Yes --&gt; CheckCurrentlyOccupied{\"Currently&lt;br&gt;Occupied?\"}\n    CheckCurrentlyOccupied -- Yes --&gt; ReleaseOccupancy[\"Set UNOCCUPIED&lt;br&gt;Cancel Timers\"]\n    CheckCurrentlyOccupied -- No --&gt; NoChange1[\"No State Change\"]\n    CheckDoorOpen -- No: All Closed --&gt; CheckMotionActive{\"Any Motion&lt;br&gt;Active?\"}\n    CheckMotionActive -- Yes --&gt; SetOccupied[\"Set OCCUPIED&lt;br&gt;Start Timers\"]\n    CheckMotionActive -- No --&gt; CheckRecentMotion{\"Recent Motion&lt;br&gt;Within Timeout?\"}\n    CheckRecentMotion -- Yes --&gt; SetOccupied\n    CheckRecentMotion -- No --&gt; NoChange2[\"No State Change\"]\n    MotionChange --&gt; UpdateMotionAgg[\"Calculate Aggregate Motion State&lt;br&gt;ANY motion active = ON&lt;br&gt;ALL motion off = OFF\"]\n    UpdateMotionAgg --&gt; CheckMotionOn{\"Motion&lt;br&gt;Turned ON?\"}\n    CheckMotionOn -- Yes --&gt; RecordTime[\"Record Motion Time\"]\n    CheckMotionOn -- No --&gt; MotionOff[\"Motion Cleared\"]\n    RecordTime --&gt; CheckDoorsClosedMotion{\"All Doors&lt;br&gt;Closed?\"}\n    CheckDoorsClosedMotion -- Yes --&gt; SetOccupied\n    CheckDoorsClosedMotion -- No --&gt; NoChange3[\"No State Change\"]\n    MotionOff --&gt; CheckOccupiedMotion{\"Currently&lt;br&gt;Occupied?\"}\n    CheckOccupiedMotion -- Yes --&gt; MaintainState[\"Maintain OCCUPIED&lt;br&gt;Wasp in Box Logic\"]\n    CheckOccupiedMotion -- No --&gt; NoChange4[\"No State Change\"]\n    ReleaseOccupancy --&gt; End([\"Update HA State\"])\n    SetOccupied --&gt; End\n    NoChange1 --&gt; End\n    NoChange2 --&gt; End\n    NoChange3 --&gt; End\n    NoChange4 --&gt; End\n    MaintainState --&gt; End\n\n    style ReleaseOccupancy fill:#D50000,color:#FFFFFF\n    style SetOccupied fill:#006127,color:#FFFFFF\n    style MaintainState fill:#2962FF,color:#FFFFFF</code></pre> <p>Key Decision Points:</p> <ul> <li>Door Opens: If ANY door opens while occupied \u2192 immediate release</li> <li>All Doors Close: Check for active or recent motion to trigger occupancy</li> <li>Motion Detected: If all doors are closed \u2192 trigger occupancy</li> <li>Motion Clears: If occupied \u2192 maintain state (wasp in box principle)</li> </ul>"},{"location":"features/wasp-in-box/#complete-scenario-reference","title":"Complete Scenario Reference","text":"<p>This section documents every possible combination of door and motion events and the expected sensor behavior.</p>"},{"location":"features/wasp-in-box/#basic-entry-scenarios","title":"Basic Entry Scenarios","text":""},{"location":"features/wasp-in-box/#scenario-1-door-closes-motion-detected","title":"Scenario 1: Door Closes \u2192 Motion Detected","text":"<p>Initial State: Sensor OFF, Door OPEN, Motion OFF</p> <ol> <li>Door CLOSES \u2192 Sensor stays OFF (no motion yet)</li> <li>Motion DETECTED \u2192 Sensor turns ON \u2713</li> </ol> <p>Logic: Motion detected with door closed triggers occupancy</p>"},{"location":"features/wasp-in-box/#scenario-2-motion-detected-door-closes","title":"Scenario 2: Motion Detected \u2192 Door Closes","text":"<p>Initial State: Sensor OFF, Door OPEN, Motion ON</p> <ol> <li>Motion DETECTED (door open) \u2192 Sensor stays OFF (door still open)</li> <li>Door CLOSES \u2192 Sensor turns ON \u2713</li> </ol> <p>Logic: Door closes with active motion triggers occupancy</p>"},{"location":"features/wasp-in-box/#scenario-3-motion-clears-door-closes-within-timeout","title":"Scenario 3: Motion \u2192 Clears \u2192 Door Closes (Within Timeout)","text":"<p>Initial State: Sensor OFF, Door OPEN, Motion OFF</p> <ol> <li>Motion DETECTED \u2192 Sensor stays OFF (door still open)</li> <li>Motion CLEARS \u2192 Sensor stays OFF</li> <li>Wait &lt; motion_timeout seconds</li> <li>Door CLOSES \u2192 Sensor turns ON \u2713</li> </ol> <p>Logic: Door closes with recent motion (within timeout window) triggers occupancy. This is the classic \"person enters room\" pattern.</p>"},{"location":"features/wasp-in-box/#scenario-4-motion-clears-door-closes-after-timeout","title":"Scenario 4: Motion \u2192 Clears \u2192 Door Closes (After Timeout)","text":"<p>Initial State: Sensor OFF, Door OPEN, Motion OFF</p> <ol> <li>Motion DETECTED \u2192 Sensor stays OFF (door still open)</li> <li>Motion CLEARS \u2192 Sensor stays OFF</li> <li>Wait &gt; motion_timeout seconds</li> <li>Door CLOSES \u2192 Sensor stays OFF \u2717</li> </ol> <p>Logic: Door closes but motion is too old (outside timeout window). This prevents false positives from stale motion events.</p>"},{"location":"features/wasp-in-box/#exit-and-persistence-scenarios","title":"Exit and Persistence Scenarios","text":""},{"location":"features/wasp-in-box/#scenario-5-door-opens-while-occupied","title":"Scenario 5: Door Opens While Occupied","text":"<p>Initial State: Sensor ON, Door CLOSED, Motion OFF</p> <ul> <li>Door OPENS \u2192 Sensor turns OFF \u2713</li> </ul> <p>Logic: Door opening always clears occupancy (the \"wasp escapes\" through any exit)</p>"},{"location":"features/wasp-in-box/#scenario-6-motion-clears-while-occupied","title":"Scenario 6: Motion Clears While Occupied","text":"<p>Initial State: Sensor ON, Door CLOSED, Motion ON</p> <ul> <li>Motion CLEARS \u2192 Sensor stays ON \u2713</li> </ul> <p>Logic: Once occupied, sensor maintains state until door opens. This is the core \"wasp in box\" behavior - motion stopping doesn't mean the person left.</p>"},{"location":"features/wasp-in-box/#scenario-7-motion-detected-with-door-already-closed","title":"Scenario 7: Motion Detected With Door Already Closed","text":"<p>Initial State: Sensor OFF, Door CLOSED, Motion OFF</p> <ul> <li>Motion DETECTED \u2192 Sensor turns ON \u2713</li> </ul> <p>Logic: Motion with door closed immediately triggers occupancy</p>"},{"location":"features/wasp-in-box/#door-cycle-scenarios","title":"Door Cycle Scenarios","text":""},{"location":"features/wasp-in-box/#scenario-8-multiple-door-cycles-without-motion","title":"Scenario 8: Multiple Door Cycles Without Motion","text":"<p>Initial State: Sensor OFF, Door CLOSED, Motion OFF</p> <ol> <li>Door OPENS \u2192 Sensor stays OFF</li> <li>Door CLOSES \u2192 Sensor stays OFF (no motion)</li> <li>Door OPENS again \u2192 Sensor stays OFF</li> <li>Door CLOSES again \u2192 Sensor stays OFF \u2717</li> </ol> <p>Logic: Door cycles without motion don't trigger occupancy. A person must be detected entering.</p>"},{"location":"features/wasp-in-box/#scenario-9-quick-entry-then-exit","title":"Scenario 9: Quick Entry Then Exit","text":"<p>Initial State: Sensor OFF, Door CLOSED, Motion OFF</p> <ol> <li>Door OPENS \u2192 Sensor stays OFF</li> <li>Motion DETECTED (briefly) \u2192 Sensor stays OFF (door open)</li> <li>Motion CLEARS</li> <li>Door CLOSES (within motion_timeout) \u2192 Sensor turns ON</li> <li>Door OPENS immediately \u2192 Sensor turns OFF \u2713</li> </ol> <p>Logic: Detects person entering then immediately leaving. Motion during entry is captured, triggers occupancy when door closes, then door opening releases them.</p>"},{"location":"features/wasp-in-box/#verification-scenarios-if-enabled","title":"Verification Scenarios (if enabled)","text":""},{"location":"features/wasp-in-box/#scenario-10a-motion-sustained-through-verification","title":"Scenario 10a: Motion Sustained Through Verification","text":"<p>Initial State: Sensor OFF, verification_delay = 30s</p> <ol> <li>Sensor turns ON (entry detected) \u2192 Verification timer starts</li> <li>Wait 30 seconds</li> <li>Motion still ON \u2192 Sensor stays ON \u2713</li> </ol> <p>Logic: Verification confirms genuine occupancy</p>"},{"location":"features/wasp-in-box/#scenario-10b-motion-clears-before-verification","title":"Scenario 10b: Motion Clears Before Verification","text":"<p>Initial State: Sensor OFF, verification_delay = 30s</p> <ol> <li>Sensor turns ON (entry detected) \u2192 Verification timer starts</li> <li>Motion CLEARS</li> <li>Wait 30 seconds</li> <li>No motion detected \u2192 Sensor turns OFF \u2713</li> </ol> <p>Logic: Verification detected a false positive (e.g., sensor cooldown caused initial trigger). This prevents false occupancy from quick in-and-out movements.</p>"},{"location":"features/wasp-in-box/#timeout-scenarios","title":"Timeout Scenarios","text":""},{"location":"features/wasp-in-box/#scenario-11-maximum-duration-timeout","title":"Scenario 11: Maximum Duration Timeout","text":"<p>Initial State: Sensor ON, max_duration = 3600s (1 hour)</p> <ul> <li>Wait &gt; 3600 seconds \u2192 Sensor turns OFF \u2713</li> </ul> <p>Logic: Safety timeout prevents sensor staying ON indefinitely if someone exits through an unmonitored path</p>"},{"location":"features/wasp-in-box/#multiple-sensor-scenarios","title":"Multiple Sensor Scenarios","text":""},{"location":"features/wasp-in-box/#scenario-12-multiple-doors-any-door-opens","title":"Scenario 12: Multiple Doors - Any Door Opens","text":"<p>Initial State: Sensor ON, Door A CLOSED, Door B CLOSED</p> <ol> <li>Door A OPENS \u2192 Sensor turns OFF \u2713</li> <li>(Door B still closed)</li> </ol> <p>Logic: ANY door opening releases occupancy, regardless of which door or how many other doors remain closed</p>"},{"location":"features/wasp-in-box/#scenario-13-multiple-doors-all-must-close","title":"Scenario 13: Multiple Doors - All Must Close","text":"<p>Initial State: Sensor OFF, Door A OPEN, Door B CLOSED, Motion ON</p> <ol> <li>Motion DETECTED \u2192 Sensor stays OFF (Door A still open)</li> <li>Door B OPENS then CLOSES \u2192 Sensor stays OFF (Door A still open)</li> <li>Door A CLOSES \u2192 Sensor turns ON \u2713 (all doors now closed)</li> </ol> <p>Logic: ALL doors must be closed for occupancy to trigger</p>"},{"location":"features/wasp-in-box/#scenario-14-multiple-motion-sensors-any-triggers","title":"Scenario 14: Multiple Motion Sensors - Any Triggers","text":"<p>Initial State: Sensor OFF, All Doors CLOSED, Motion1 OFF, Motion2 OFF</p> <ol> <li>Motion2 DETECTED (Motion1 still OFF) \u2192 Sensor turns ON \u2713</li> </ol> <p>Logic: ANY motion sensor detecting movement triggers occupancy when doors are closed</p>"},{"location":"features/wasp-in-box/#scenario-15-multiple-motion-sensors-staggered-detection","title":"Scenario 15: Multiple Motion Sensors - Staggered Detection","text":"<p>Initial State: Sensor OFF, All Doors CLOSED</p> <ol> <li>Motion1 DETECTED \u2192 Sensor turns ON</li> <li>Motion1 CLEARS</li> <li>Motion2 DETECTED \u2192 Sensor stays ON \u2713</li> <li>Motion2 CLEARS \u2192 Sensor stays ON \u2713 (wasp in box)</li> <li>Door opens \u2192 Sensor turns OFF</li> </ol> <p>Logic: ANY motion keeps occupancy active. Once all motion clears, wasp-in-box logic maintains occupancy until door opens.</p>"},{"location":"features/wasp-in-box/#decision-table","title":"Decision Table","text":"<p>Quick reference for all state transitions:</p> Current State Door State Motion State Motion Recency Result Reason OFF Closes (all) ON (any) - Turn ON Entry with active motion OFF Closes (all) OFF Within timeout Turn ON Entry with recent motion OFF Closes (all) OFF Outside timeout Stay OFF Motion too old ON Opens (any) - - Turn OFF Exit detected OFF Closed (all) Turns ON - Turn ON Motion in closed room ON Closed (all) Turns OFF - Stay ON Wasp in box persists OFF Open (any) ON - Stay OFF Can't trap with open door OFF Open (any) OFF - Stay OFF No entry detected"},{"location":"features/wasp-in-box/#benefits","title":"Benefits","text":"<ul> <li>Solves the \"bathroom problem\": Traditional motion sensors often time out while someone is in the bathroom, leading to lights turning off at inconvenient moments</li> <li>Works with minimal sensors: Can function with just a door sensor if needed</li> <li>Complements motion detection: Fills the gaps where motion detection fails</li> <li>Improves automation reliability: More accurately maintains occupancy state for rooms where people may be stationary</li> <li>Supports multiple sensors: Automatically aggregates state from multiple doors and motion sensors</li> </ul>"},{"location":"features/wasp-in-box/#technical-details","title":"Technical Details","text":"<p>The Wasp in Box sensor tracks state transitions in a finite state machine:</p> <ol> <li>UNKNOWN \u2192 Initial state before any data is collected</li> <li>UNOCCUPIED \u2192 No one is in the room</li> <li>OCCUPIED \u2192 Someone is in the room</li> </ol> <p>The sensor uses Home Assistant's state tracking to monitor door and motion entities, processing their state changes to update its internal state based on the scenarios documented above.</p>"},{"location":"features/wasp-in-box/#state-persistence","title":"State Persistence","text":"<p>The sensor retains its state between Home Assistant restarts, making it reliable for long-term occupancy tracking. State restoration includes:</p> <ul> <li>Current occupancy status</li> <li>Last door event timestamp</li> <li>Last motion event timestamp</li> <li>Last occupied timestamp (for max duration calculations)</li> </ul>"},{"location":"features/wasp-in-box/#maximum-duration-feature","title":"Maximum Duration Feature","text":"<p>The sensor can be configured with a maximum occupancy duration. This addresses scenarios where a space might be incorrectly marked as occupied for extended periods:</p> <ol> <li>When enabled, the sensor will automatically reset to unoccupied after the specified duration (see Scenario 11)</li> <li>Set to 0 (default) to disable this feature and maintain the traditional Wasp in Box behavior</li> <li>Useful in environments where someone might leave through an unmonitored exit</li> </ol>"},{"location":"features/wasp-in-box/#multi-sensor-aggregation","title":"Multi-Sensor Aggregation","text":"<p>When multiple sensors are configured, the Wasp in Box sensor automatically aggregates their states:</p> <ul> <li>Multiple Doors: Returns aggregate \"OPEN\" if ANY door is open, \"CLOSED\" if all are closed (Scenarios 12, 13)</li> <li>Multiple Motion Sensors: Returns aggregate \"ON\" if ANY sensor detects motion, \"OFF\" if all are off (Scenarios 14, 15)</li> <li>Scalability: Works seamlessly with any number of door or motion sensors</li> <li>Reliability: If one sensor fails or becomes unavailable, others continue to function</li> </ul>"},{"location":"features/wasp-in-box/#integration","title":"Integration","text":"<p>The feature creates a binary sensor that becomes part of your Area Occupancy Detection system:</p> <ul> <li>Entity ID: <code>binary_sensor.[area_name]_wasp_in_box</code></li> <li>States: <code>on</code> (occupied) / <code>off</code> (unoccupied)</li> <li>Device Class: <code>occupancy</code></li> <li>Weight: The sensor's state is considered alongside other sensors in the Bayesian probability calculation, with its influence determined by the configured weight (default: 0.8)</li> </ul>"},{"location":"features/wasp-in-box/#configuration","title":"Configuration","text":"<p>The Wasp in Box sensor can be configured in the integration settings:</p> Setting Description Default Related Scenarios Enable Wasp in Box Turn this virtual sensor on or off Disabled All scenarios Motion Timeout How long motion events are considered recent (in seconds) 300s (5 min) Scenarios 3, 4 Wasp Weight The weight factor for this sensor in probability calculations (0.1-1.0) 0.8 N/A (probability) Maximum Occupied Duration Maximum time (in seconds) a space can be marked as occupied before automatically resetting (0 = no limit) 0 (disabled) Scenario 11 Verification Delay Delay before re-checking motion to verify occupancy, in seconds (0-120, 0 = disabled) 0 (disabled) Scenarios 10a, 10b"},{"location":"features/wasp-in-box/#motion-timeout","title":"Motion Timeout","text":"<p>The motion timeout (default 300 seconds = 5 minutes) determines how long after motion detection the sensor will still consider that motion \"recent\" enough to trigger occupancy when a door closes.</p> <ul> <li>Longer timeout: More forgiving, catches slower-moving people (Scenario 3)</li> <li>Shorter timeout: More precise, reduces false positives from stale motion (Scenario 4)</li> <li>Recommendation: Start with 300s and adjust based on typical entry behavior</li> </ul>"},{"location":"features/wasp-in-box/#motion-re-verification","title":"Motion Re-verification","text":"<p>The verification delay feature helps prevent false positives when people enter and exit quickly:</p> <ul> <li>How it works: When the room is marked as occupied, wait the specified delay, then re-check motion sensors (Scenarios 10a, 10b)</li> <li>If motion present: Keep the room occupied (genuine occupancy)</li> <li>If no motion: Clear occupancy (false positive from sensor cooldown)</li> <li>Recommendation: Start with 15-30 seconds for most setups; adjust based on your motion sensor cooldown periods</li> </ul>"},{"location":"features/wasp-in-box/#use-cases-examples","title":"Use Cases &amp; Examples","text":""},{"location":"features/wasp-in-box/#single-entry-point-rooms","title":"Single Entry Point Rooms","text":"<p>Perfect for rooms with one door and predictable entry/exit patterns:</p> <ul> <li>Bathrooms: Maintain occupancy even when showering or otherwise stationary (Scenario 6)</li> <li>Closets: Detect occupancy in walk-in closets with minimal sensor requirements</li> <li>Small Offices: Maintain occupancy state when people are sitting still at a desk</li> <li>Storage Rooms: Track when people are retrieving items from storage</li> </ul>"},{"location":"features/wasp-in-box/#multiple-entry-point-rooms","title":"Multiple Entry Point Rooms","text":"<p>Works with multiple doors when all exits are monitored:</p> <ul> <li>Bathrooms with en-suite access: Monitor both hallway and bedroom doors (Scenarios 12, 13)</li> <li>Pass-through spaces: Rooms with entrance and exit doors</li> <li>Note: ANY door opening releases occupancy, so all entry/exit points should have sensors</li> </ul>"},{"location":"features/wasp-in-box/#motion-detection-strategies","title":"Motion Detection Strategies","text":"<ul> <li>Comprehensive motion coverage: Multiple motion sensors ensure detection anywhere in the room (Scenarios 14, 15)</li> <li>Entry-only motion: Single sensor at entrance captures people entering (Scenarios 1-4)</li> <li>Door-only mode: Can function without motion sensors using duration-based occupancy</li> <li>Persistent occupancy: Unlike regular motion sensors, maintains state during inactivity (Scenario 6)</li> </ul>"},{"location":"features/wasp-in-box/#entity-attributes","title":"Entity Attributes","text":"<p>The sensor provides these diagnostic attributes to help understand its current state:</p> Attribute Description Example Value <code>door_state</code> Aggregate state of monitored door(s): \"on\" (open) or \"off\" (closed) <code>off</code> <code>last_door_time</code> ISO 8601 timestamp of the last door state change <code>2025-01-15T10:30:45.123Z</code> <code>motion_state</code> Aggregate state of motion sensors: \"on\" (detected) or \"off\" (clear) <code>on</code> <code>last_motion_time</code> ISO 8601 timestamp of the last motion detection <code>2025-01-15T10:29:30.456Z</code> <code>motion_timeout</code> Current motion timeout setting in seconds <code>300</code> <code>max_duration</code> Maximum occupancy duration in seconds (0 = disabled) <code>3600</code> <code>last_occupied_time</code> ISO 8601 timestamp when the space was last marked as occupied <code>2025-01-15T10:30:00.789Z</code> <code>verification_delay</code> Configured verification delay in seconds (0 = disabled) <code>30</code> <code>verification_pending</code> Whether a verification check is currently scheduled <code>true</code> / <code>false</code> <p>These attributes are useful for:</p> <ul> <li>Debugging: Understanding why the sensor changed state</li> <li>Automations: Creating advanced logic based on timing or state combinations</li> <li>Dashboards: Displaying detailed occupancy information</li> </ul>"},{"location":"getting-started/basic-usage/","title":"Basic Usage","text":"<p>This guide covers the basic usage of the Area Occupancy Detection integration after installation and configuration.</p>"},{"location":"getting-started/basic-usage/#created-entities","title":"Created Entities","text":"<p>After setup, the integration creates several entities:</p>"},{"location":"getting-started/basic-usage/#occupancy-status","title":"Occupancy Status","text":"<p>This entity shows the overall occupancy status, you can use it in automations such as turning on lights when the area is occupied</p> State Description Occupied (on) This means the probability of occupancy is above the set threshold. Clear (off) This means the probability of occupancy is below the set threshold."},{"location":"getting-started/basic-usage/#occupancy-probability","title":"Occupancy Probability","text":"<p>This entity shows the calculated probability of occupancy based on the sensors and their weights that are currently active based on your configuration.</p> <p>Attributes:</p> Attribute Description <code>type_probabilities</code> Mapping of each sensor type to its individual occupancy probability contribution"},{"location":"getting-started/basic-usage/#prior-probability","title":"Prior Probability","text":"<p>The prior probability is the probability of occupancy before any sensors are active. It is used to provide a baseline probability of occupancy.</p> <p>Attributes:</p> Attribute Description <code>global_prior</code> Baseline prior derived from historical analysis <code>time_prior</code> Time-based modifier applied to the prior <code>day_of_week</code> Day-of-week index used for time prior <code>time_slot</code> Time slot index used for time prior"},{"location":"getting-started/basic-usage/#evidence","title":"Evidence","text":"<p>Lists active and inactive entities and provides detailed information about each entity.</p> <p>Attributes:</p> Attribute Description <code>evidence</code> Comma-separated list of active entity names <code>no_evidence</code> Comma-separated list of inactive entity names <code>total</code> Total number of entities <code>details</code> Detailed information for each entity including probabilities and decay status"},{"location":"getting-started/basic-usage/#decay-status","title":"Decay Status","text":"<p>This entity shows the status of the decay process.</p> <p>State: % of decay active (0-100)</p>"},{"location":"getting-started/basic-usage/#threshold","title":"Threshold","text":"<p>This number entity shows the threshold for occupancy.</p> <p>You can change the threshold using this entity and will be reflected in the occupancy status entity immediately. This is great for quickly testing different thresholds without having to reconfigure the integration.</p>"},{"location":"getting-started/basic-usage/#basic-automations","title":"Basic Automations","text":""},{"location":"getting-started/basic-usage/#occupancy-based-lighting","title":"Occupancy-Based Lighting","text":"<pre><code>automation:\n  - alias: \"Turn on lights when area occupied\"\n    trigger:\n      - platform: state\n        entity_id: binary_sensor.living_room_occupancy_status\n        to: \"on\"\n    action:\n      - service: light.turn_on\n        target:\n          entity_id: light.living_room\n\n  - alias: \"Turn off lights when area unoccupied\"\n    trigger:\n      - platform: state\n        entity_id: binary_sensor.living_room_occupancy_status\n        to: \"off\"\n        for:\n          minutes: 5\n    action:\n      - service: light.turn_off\n        target:\n          entity_id: light.living_room\n</code></pre>"},{"location":"getting-started/basic-usage/#high-probability-alert","title":"High Probability Alert","text":"<pre><code>automation:\n  - alias: \"High Occupancy Probability Alert\"\n    trigger:\n      - platform: numeric_state\n        entity_id: sensor.living_room_occupancy_probability\n        above: 90\n    action:\n      - service: notify.mobile_app\n        data:\n          title: \"High Occupancy Probability\"\n          message: \"Living Room occupancy probability is {{ states('sensor.living_room_occupancy_probability') }}%\"\n</code></pre>"},{"location":"getting-started/basic-usage/#tips-and-tricks","title":"Tips and Tricks","text":"<ol> <li> <p>Optimal Threshold:</p> <ul> <li>Start at 50%</li> <li>Increase for fewer false positives</li> <li>Decrease for higher sensitivity</li> </ul> </li> <li> <p>Sensor Weights:</p> <ul> <li>Adjust based on reliability</li> <li>Higher weights = stronger influence</li> <li>Balance multiple sensors</li> </ul> </li> <li> <p>Decay Settings:</p> <ul> <li>Match room usage patterns</li> <li>Longer windows for less traffic</li> <li>Shorter windows for high traffic</li> </ul> </li> <li> <p>Historical Learning:</p> <ul> <li>Enable for better accuracy</li> <li>Use longer periods when stable</li> <li>Update regularly</li> </ul> </li> </ol>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Area Occupancy Detection is configured entirely through the Home Assistant user interface.</p>"},{"location":"getting-started/configuration/#adding-a-new-area","title":"Adding a New Area","text":"<ol> <li>Navigate to Integrations: Go to Configuration -&gt; Devices &amp; Services -&gt; Integrations.</li> <li>Add Integration: Click the + Add Integration button in the bottom right.</li> <li>Search: Search for \"Area Occupancy Detection\" and select it.</li> <li>Configure Area Name:<ul> <li>Enter a descriptive Name for the area this instance will monitor (e.g., \"Living Room\", \"Office\"). This name will be used in entity IDs.</li> </ul> </li> </ol>"},{"location":"getting-started/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"getting-started/configuration/#area-purpose","title":"Area Purpose","text":"<p>The first step after naming the area is choosing its purpose. This sets a sensible default for the decay half life used when probability decreases. The purpose selection affects how quickly the system \"forgets\" about occupancy after activity stops.</p> Purpose Description Default Half-Life Passageway Quick walk-through: halls, stair landings, entry vestibules. Motion evidence should disappear almost immediately after the last footstep. 60 seconds Utility Laundry room, pantry, boot room. Short functional visits (grab the detergent, put on shoes) with little lingering. 120 seconds Food-Prep Kitchen work zone around the hob or countertop. Residents step away to the fridge or sink and return; a few minutes of memory prevents flicker. 300 seconds Eating Dining table, breakfast bar. Family members usually stay seated 10-20 minutes but may be fairly still between bites. 600 seconds Working / Studying Home office, homework desk. Long seated sessions with occasional trips for coffee or printer; ten-minute half-life avoids premature \"vacant\". 600 seconds Social Living room, play zone, game area. Conversations or board games create sporadic motion; evidence fades gently to ride out quiet pauses. 720 seconds Relaxing TV lounge, reading nook, music corner. People can remain very still while watching or reading; a quarter-hour memory keeps the room \"occupied\" through stretches of calm. 900 seconds Sleeping Bedrooms, nap pods. Motion is scarce; a long half-life prevents false vacancy during deep sleep yet lets the house revert to \"empty\" within a couple of hours after everyone gets up. 1800 seconds <p>You can override the resulting half life in the parameters section if needed.</p> <p>After providing the name and purpose, you'll be guided through selecting sensors and configuring parameters. You can also reconfigure these later by clicking Configure on the integration card.</p>"},{"location":"getting-started/configuration/#sensor-selection","title":"Sensor Selection","text":"<p>You will be prompted to select entities for various categories. You only need to select sensors relevant to the specific area you are configuring.</p> Sensor Type Entity Type Description Default States/Range Primary Occupancy Sensor (Required) <code>binary_sensor</code> One reliable motion or occupancy sensor. Crucial as ground truth for Prior Probability Learning. <code>on</code> Motion Sensors <code>binary_sensor</code> Additional motion sensors in the area such as PIR or mmWave sensors. <code>on</code> Door Sensors <code>binary_sensor</code> Relevant door sensors. <code>Closed</code> Window Sensors <code>binary_sensor</code> Relevant window sensors. <code>Open</code> Media Devices <code>media_player</code> Relevant media players. <code>playing</code>, <code>paused</code> Appliances <code>switch</code>, <code>binary_sensor</code>, <code>sensor</code> Relevant switch or sensor entities representing appliances. <code>on</code>, <code>standby</code> Illuminance Sensors <code>sensor</code> Illuminance sensors measuring light levels (lux) <code>30.0 - 100000.0</code> Temperature Sensors <code>sensor</code> Temperature sensors measuring temperature <code>18.0 - 24.0</code> Humidity Sensors <code>sensor</code> Humidity sensors measuring humidity <code>70.0 - 100.0</code>"},{"location":"getting-started/configuration/#available-states","title":"Available States","text":"<p>Different sensor types support different state configurations:</p>"},{"location":"getting-started/configuration/#door-sensors","title":"Door Sensors","text":"<ul> <li>Open - Door is open</li> <li>Closed - Door is closed (default)</li> </ul>"},{"location":"getting-started/configuration/#window-sensors","title":"Window Sensors","text":"<ul> <li>Open - Window is open (default)</li> <li>Closed - Window is closed</li> </ul>"},{"location":"getting-started/configuration/#media-devices","title":"Media Devices","text":"<ul> <li>Playing - Media is actively playing (default)</li> <li>Paused - Media is paused</li> <li>Idle - Media device is idle</li> <li>Off - Media device is off</li> </ul>"},{"location":"getting-started/configuration/#appliances","title":"Appliances","text":"<ul> <li>On - Appliance is active (default)</li> <li>Off - Appliance is off</li> <li>Standby - Appliance is in standby mode</li> </ul>"},{"location":"getting-started/configuration/#motion-sensors","title":"Motion Sensors","text":"<ul> <li>Active - Motion detected (default)</li> <li>Inactive - No motion detected</li> </ul>"},{"location":"getting-started/configuration/#parameters","title":"Parameters","text":"Parameter Description Range Default Occupancy Threshold (%) The probability percentage required for the main Occupancy Status binary sensor to turn <code>on</code> 1-99 50 History Period (Days) The number of past days to analyze when performing Prior Probability Learning 1-90 7 Decay Enabled Toggle whether to enable the Probability Decay feature True/False Enabled Decay Half Life (Seconds) When decay is enabled this defines how long it takes for the occupancy probability to reduce by half after activity stops 10-3600 Based on purpose Motion Timeout (Seconds) How long motion sensors remain \"active\" after detecting motion before automatically resetting to inactive 0-3600 300 (5 minutes)"},{"location":"getting-started/configuration/#wasp-in-box-feature","title":"Wasp in Box Feature","text":"<p>The \"Wasp in Box\" is a virtual sensor that combines motion and door sensor data to create a more reliable occupancy indicator. It's particularly useful for areas where people might be still for extended periods.</p> Parameter Description Range Default Wasp in Box Enabled Toggle the Wasp in Box virtual sensor True/False Disabled Motion Timeout How long motion sensors remain active after detecting motion 0-3600 seconds 300 seconds Weight Influence of the Wasp in Box sensor on final probability calculation 0.0-1.0 0.8 Max Duration Maximum time the Wasp in Box can indicate occupancy without new motion 0-86400 seconds 3600 seconds (1 hour)"},{"location":"getting-started/configuration/#sensor-weights","title":"Sensor Weights","text":"<p>Adjust the influence of different types of sensors on the final probability calculation. Weights range from 0.0 (no influence) to 1.0 (maximum influence). Default values are provided based on typical sensor reliability for occupancy.</p> Sensor Type Default Weight Motion Sensor 1.00 Media Device 0.70 Appliance 0.40 Door Sensor 0.30 Window Sensor 0.20 Environmental Sensor 0.10 Wasp in Box 0.80"},{"location":"getting-started/configuration/#reconfiguring-an-existing-area","title":"Reconfiguring an Existing Area","text":"<ol> <li>Go to Configuration -&gt; Devices &amp; Services -&gt; Integrations.</li> <li>Find the Area Occupancy Detection integration card for the area you want to change.</li> <li>Click Configure.</li> <li>You can then step through and modify any of the sensor selections, parameters, or weights.</li> </ol> <p>Click Submit on each step to save changes.</p>"},{"location":"getting-started/configuration/#automatic-learning","title":"Automatic Learning","text":"<p>The integration automatically:</p> <ul> <li>Analyzes historical data to determine sensor reliability</li> <li>Calculates correlation between sensor states and occupancy</li> <li>Adjusts probabilities based on learned patterns</li> <li>Updates calculations in real-time</li> </ul>"},{"location":"getting-started/configuration/#created-entities","title":"Created Entities","text":"<p>After configuration, the integration creates:</p> <ol> <li>Occupancy Probability Sensor \u2013 Shows the calculated probability as a percentage.</li> <li>Occupancy Status Binary Sensor \u2013 Indicates if the area is occupied based on the threshold.</li> <li>Prior Probability Sensor \u2013 Displays the combined prior used for calculations.</li> <li>Evidence Sensor \u2013 Lists entities providing evidence and those that are inactive.</li> <li>Decay Status Sensor \u2013 Indicates progress of probability decay.</li> <li>Occupancy Threshold Number \u2013 Allows adjusting the threshold used by the binary sensor.</li> <li>Wasp in Box Sensor \u2013 Virtual sensor combining motion and door data (if enabled).</li> </ol>"},{"location":"getting-started/configuration/#adjusting-configuration","title":"Adjusting Configuration","text":"<p>You can adjust settings anytime through the integration options:</p> <ol> <li>Go to Settings \u2192 Devices &amp; Services</li> <li>Find Area Occupancy Detection</li> <li>Click \"Configure\"</li> <li>Modify settings as needed</li> </ol>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<p>After configuration:</p> <ol> <li>Monitor the created entities to ensure they reflect actual occupancy</li> <li>Adjust the threshold if needed</li> <li>Review the Basic Usage guide</li> </ol>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>There are two main ways to install the Area Occupancy Detection integration for Home Assistant:</p>"},{"location":"getting-started/installation/#method-1-hacs-recommended","title":"Method 1: HACS (Recommended)","text":"<ol> <li>Ensure HACS is installed: If you don't have the Home Assistant Community Store (HACS) installed, follow their instructions to set it up first.</li> <li>Navigate to HACS: Open your Home Assistant frontend and go to HACS in the sidebar.</li> <li>Go to Integrations: Click on \"Integrations\".</li> <li>Explore &amp; Add Repositories: Click the vertical ellipsis (three dots) in the top right corner and select \"Custom repositories\".</li> <li>Add Custom Repository:<ul> <li>Repository: Enter the URL of this integration's GitHub repository: <code>https://github.com/Hankanman/Area-Occupancy-Detection</code></li> <li>Category: Select <code>Integration</code>.</li> <li>Click Add.</li> </ul> </li> <li>Install Integration: Back in the main HACS Integrations view, search for \"Area Occupancy Detection\". Click on it and then click the Download button. Select the latest version and confirm.</li> <li>Restart Home Assistant: After the download is complete, restart your Home Assistant instance (Configuration -&gt; Settings -&gt; Server Management -&gt; Restart, or use the Developer Tools).</li> </ol>"},{"location":"getting-started/installation/#method-2-manual-installation","title":"Method 2: Manual Installation","text":"<ol> <li>Download the Latest Release: Go to the Releases page of the GitHub repository and download the <code>area_occupancy.zip</code> file from the latest release assets.</li> <li>Unzip the File: Extract the contents of the downloaded zip file. You should have a folder named <code>area_occupancy</code> containing files like <code>__init__.py</code>, <code>manifest.json</code>, etc.</li> <li>Access Home Assistant Configuration Directory: Connect to the machine running your Home Assistant instance (e.g., via Samba, SSH, or the File editor add-on).</li> <li>Navigate to <code>custom_components</code>: Inside your main Home Assistant configuration directory (where your <code>configuration.yaml</code> file is located), find or create a folder named <code>custom_components</code>.</li> <li>Copy Integration Folder: Copy the entire extracted <code>area_occupancy</code> folder (the one containing <code>__init__.py</code>) into the <code>custom_components</code> folder.     Your directory structure should look like this:     <pre><code>&lt;config_directory&gt;\n    \u2514\u2500\u2500 custom_components/\n        \u2514\u2500\u2500 area_occupancy/\n            \u251c\u2500\u2500 __init__.py\n            \u251c\u2500\u2500 manifest.json\n            \u251c\u2500\u2500 sensor.py\n            \u2514\u2500\u2500 ... (other integration files)\n</code></pre></li> <li>Restart Home Assistant: Restart your Home Assistant instance (Configuration -&gt; Settings -&gt; Server Management -&gt; Restart, or use the Developer Tools).</li> </ol>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>After installation:</p> <ol> <li>Restart Home Assistant</li> <li>Go to Settings \u2192 Devices &amp; Services</li> <li>Click \"+ Add Integration\"</li> <li>Search for \"Area Occupancy Detection\"</li> <li>If it appears, installation was successful</li> <li>If not, check Home Assistant logs for errors</li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Search GitHub Issues</li> <li>Join the Discussion</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After restarting, proceed to the Configuration guide to set up your first Area Occupancy instance.</p>"},{"location":"technical/debug/","title":"Debugging","text":"<p>Below are the instructions for debugging the integration.</p> <ol> <li> <p>Enable debug logging</p> <ul> <li>Add the following to the <code>configuration.yaml</code> file <pre><code>logger:\n  logs:\n    custom_components.area_occupancy: DEBUG\n</code></pre></li> <li>Restart Home Assistant</li> </ul> </li> <li> <p>Perform the action you want to debug</p> <ul> <li>For example, if you want to debug the occupancy sensor, you can trigger a motion sensor to change the occupancy state</li> </ul> </li> <li>Check the logs in Home Assistant<ul> <li>Go to Settings</li> <li>Click on \"System\"</li> <li>Click on \"Logs\"</li> <li>Look for the integration name (e.g. <code>area_occupancy or Area Occupancy Detection</code>)</li> <li>Look for the debug messages, there may be warnings or errors. Warnings are not a problem, but errors are. </li> <li>If there are errors, please open an issue on the GitHub repository</li> <li>Open the error in the logs and copy the error message </li> </ul> </li> </ol>"},{"location":"technical/deep-dive/","title":"Area Occupancy Probability Calculation Explained","text":"<p>This document gives a high level overview of how the <code>area_occupancy</code> integration calculates occupancy probability and manages learned data.</p>"},{"location":"technical/deep-dive/#core-concepts","title":"Core Concepts","text":"<ul> <li>Occupancy Probability: Final output value (0.0\u20131.0) indicating the likelihood that the area is currently occupied.</li> <li>Priors: Historical probabilities learned from the primary occupancy sensor and other configured entities.</li> <li>Likelihoods: For each entity, probabilities <code>P(Active | Occupied)</code> and <code>P(Active | Not Occupied)</code> learned from history.</li> <li>Weights: User-configured values (0.0\u20131.0) assigned per sensor type to influence their contribution.</li> <li>Decay: Exponential reduction in probability when no fresh evidence is present.</li> <li>Threshold: Probability level at which the binary occupancy sensor turns <code>on</code>.</li> </ul>"},{"location":"technical/deep-dive/#data-flow-and-components","title":"Data Flow and Components","text":"<ul> <li>AreaOccupancyCoordinator (<code>coordinator.py</code>): Central orchestrator that tracks entity states, schedules updates, handles decay and stores configuration.</li> <li>EntityManager (<code>data/entity.py</code>): Creates and maintains <code>Entity</code> objects with evidence, likelihoods and decay data.</li> <li>Prior (<code>data/prior.py</code>): Handles learning priors and likelihoods from historical recorder data and exposes time-based priors.</li> <li>Bayesian Utilities (<code>utils.py</code>): Provides <code>bayesian_probability</code> and helper functions for log-space probability calculations.</li> <li>Database (<code>db.py</code>): Stores historical state intervals used for learning.</li> <li>Services (<code>service.py</code>): Exposes services such as <code>run_analysis</code> and <code>get_area_status</code>.</li> </ul>"},{"location":"technical/deep-dive/#processing-steps","title":"Processing Steps","text":"<ol> <li>Initialization: Coordinator loads configuration, sets up entities and loads any stored priors from the database.</li> <li>State Updates: When a monitored entity changes state, the coordinator updates the corresponding <code>Entity</code> object and triggers a probability recalculation.</li> <li>Probability Calculation: <code>bayesian_probability</code> combines entity evidence with the area and time priors in log space, applying the configured weights.</li> <li>Decay Handling: If probability decreases, entity decay objects gradually reduce their influence until new evidence appears.</li> <li>Learning Priors: Periodically or via <code>run_analysis</code>, the <code>Prior</code> class analyses recorder history to update priors and likelihoods which are stored in the database.</li> <li>Outputs: The coordinator updates Home Assistant entities (probability, status, priors, evidence, decay, threshold) with the latest values.</li> </ol> <p>This architecture allows the integration to react quickly to new sensor data while continuously refining its understanding of each entity's reliability over time.</p>"},{"location":"technical/prerelease/","title":"Pre-Releases","text":"<p>You are always welcome and encouraged to contribute to the project. Trying out the pre-releases and submitting feedback/issues is a great way to help.</p>"},{"location":"technical/prerelease/#installing-pre-releases","title":"Installing Pre-releases","text":"<p>You can try out the pre-releases by downloading them via HACS. You can find the available pre-releases on the releases page.</p> <ol> <li>Go to HACS</li> <li>Search for \"Area Occupancy Detection\"     </li> <li>Select the integration</li> <li>Use the \"three dots\" menu and select \"Redownload\"     </li> <li>Select the version you want to install after expanding the \"Need a different version?\" section (e.g. <code>2025.8.1-pre2</code>) and click on \"Download\"     </li> <li>Restart Home Assistant</li> </ol>"},{"location":"technical/prerelease/#issues","title":"Issues","text":"<p>If you find any issues, please report them in the issue tracker.</p>"},{"location":"technical/prerelease/#discussions","title":"Discussions","text":"<p>If you have any feedback, please share it in the discussions section.</p>"}]}