---
description: 
globs: custom_components/**/*.py,tests/**/*.py
alwaysApply: false
---
- **Code Style & Formatting**: Write Python code that strictly follows PEP8 and PEP 257 conventions, as enforced in Home Assistant’s core ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=Home%20Assistant%20enforces%20quite%20strict,compliance%20on%20all%20code%20submitted)). Use a formatter (e.g. Black with its default settings) to ensure consistent indentation, line length, and no trailing whitespace. All submitted code is auto-checked with linting (using Ruff in HA core) and must not diverge from standard style ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=We%20use%20Ruff%20for%20code,never%20merge%20submissions%20that%20diverge)). Order imports logically (standard libs, third-party, then Home Assistant) and alphabetize contents of lists, dictionaries, and constants for consistency ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=,should%20be%20in%20alphabetical%20order)). Comments should be full sentences ending with a period ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=,should%20be%20in%20alphabetical%20order)).

- **Integration Structure & Naming**: Organize the integration into a Python package named after the integration’s domain (a short, unique lowercase name with underscores) ([Integration file structure | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_integration_file_structure#:~:text=Each%20integration%20is%20stored%20inside,mobile_app)). Include a `manifest.json` with at least the domain, name, and (for custom integrations) a version number ([Creating your first integration | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_component_index#:~:text=This%20example%20repository%20shows%20custom,the%20same%20in%20both%20cases)). Provide an `__init__.py` file for the component logic – it can be minimal (even just a docstring) if the integration only defines platforms ([Integration file structure | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_integration_file_structure#:~:text=,The%20Mobile%20App%20integration)). Define a `DOMAIN` constant in your code equal to the integration folder name ([Creating your first integration | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_component_index#:~:text=The%20scaffold%20integration%20contains%20a,up%20was%20successful)). If the integration has entity platforms (like lights, sensors, etc.), create separate platform modules (e.g. `light.py`, `sensor.py`) to implement those entities ([Integration file structure | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_integration_file_structure#:~:text=Integrating%20devices%20,etc)). Prefer to configure devices/services via the UI (config entries) rather than YAML ([Integration quality scale | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/core/integration-quality-scale/#:~:text=,integration%20can%20be%20configured%20correctly)), implementing an async config flow (`config_flow.py`) for new integrations. This modern “config entry” approach should be used unless a rare exception is granted ([Integration configuration via YAML | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/configuration_yaml_index#:~:text=Integrations%20that%20communicate%20with%20devices,will%20no%20longer%20be%20accepted)). 

- **Docstrings and Comments**: Document all modules, classes, and functions with clear docstrings adhering to PEP 257 guidelines ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=Home%20Assistant%20enforces%20quite%20strict,compliance%20on%20all%20code%20submitted)). Begin modules with a file-level docstring describing their purpose ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=The%20docstring%20in%20the%20file,what%20the%20file%20is%20about)). Use one-line summaries for functions and classes, followed by more details or sections as needed. Consistently follow either Google style or the Home Assistant standard style for docstrings (both are acceptable as long as they are used consistently and meet PEP 257 conventions). For example, a Google-style docstring may include **Args**, **Returns**, and **Raises** sections for clarity. Always keep docstrings up-to-date and descriptive of the code’s behavior. Comments in code should also be clear and meaningful, written as complete sentences ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=,should%20be%20in%20alphabetical%20order)).

- **Type Annotations**: Fully type-hint your code to modern Python standards. All functions and methods should have type annotations for parameters and return values ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=Typing)). Use `typing` and standard collection types (with generics) to annotate data structures, and prefer `| None` union syntax (Python 3.10+) or `Optional[...]` where appropriate. Maintain typing hygiene by avoiding the use of `Any` whenever possible and properly narrowing types. Home Assistant’s build will perform static type checking on your integration, and integrations that are completely typed can be added to the strict type-checking list ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=Typing)). This helps catch bugs early and makes the code easier for others to understand. 

- **Testing Practices**: Structure integration tests using **pytest**, following Home Assistant’s testing conventions. Place tests in a dedicated `tests` directory, potentially under a subfolder named after the integration’s domain (e.g. tests for the “mobile_app” integration live in `tests/components/mobile_app/` in core) ([Integration tests file structure | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_integration_tests_file_structure/#:~:text=Tests%20for%20each%20integration%20are,tests%2Fcomponents%2Fmobile_app)). Include an `__init__.py` (with a short docstring explaining the tests) and a `conftest.py` for fixtures as needed ([Integration tests file structure | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_integration_tests_file_structure/#:~:text=The%20content%20of%20this%20folder,looks%20like%20this)). Name test files with the prefix `test_`, and group tests by functionality (for example, `test_config_flow.py` for config flow tests, `test_init.py` for setup/unload tests) ([Integration tests file structure | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_integration_tests_file_structure/#:~:text=,test_init.py)). Utilize Home Assistant’s test utilities and fixtures to set up a realistic test environment. For instance, use the built-in `hass` fixture provided by Home Assistant’s pytest plugins to get a HomeAssistant core instance in your tests, and use provided helpers like `MockConfigEntry` to simulate config entries ([pytest-homeassistant-custom-component/README.md at master · MatthewFlamm/pytest-homeassistant-custom-component · GitHub](https://github.com/MatthewFlamm/pytest-homeassistant-custom-component/blob/master/README.md#:~:text=,folder%2C%20a)). (If developing outside the core repository, use the `pytest-homeassistant-custom-component` plugin to access these fixtures easily ([pytest-homeassistant-custom-component/README.md at master · MatthewFlamm/pytest-homeassistant-custom-component · GitHub](https://github.com/MatthewFlamm/pytest-homeassistant-custom-component/blob/master/README.md#:~:text=Usage%3A)).) Write tests for both successful paths and failure cases (e.g., network errors, auth failures), and aim for good coverage of your integration’s functionality. Continuous integration should run `pytest` and ensure all tests pass and coverage remains high.

- **Logging and Data Handling**: Use Python’s logging for all diagnostic output – never use prints. Define a module-level logger via `logging.getLogger(__name__)` and name it `_LOGGER` by convention. Follow Home Assistant’s logging style: do not include the integration or platform name in log messages (it’s added automatically), and do not end log messages with a period ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=There%20is%20no%20need%20to,the%20messages%20as%20you%20like)). Messages should be concise and clear. **Do not log sensitive information** such as API keys, credentials, or personal data ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=Do%20not%20print%20out%20API,is%20not%20targetting%20the%20user)). Use appropriate log levels: `_LOGGER.debug` for verbose or internal info, `_LOGGER.info` for important user-facing info, and warnings/errors for issues the user should be alerted to ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=Do%20not%20print%20out%20API,is%20not%20targetting%20the%20user)). Prefer f-strings for assembling log and debug strings in general code, but when logging, use the `%s` placeholder style to defer string formatting until needed (this avoids overhead when the log level is not enabled) ([Style guidelines | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/development_guidelines/#:~:text=%22)). For managing integration state, avoid using global variables. Instead, store shared data in `hass.data[DOMAIN]` – this is a dictionary provided by Home Assistant to keep integration-specific data accessible across the component and platforms ([Checklist for creating a component | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_component_code_review#:~:text=1,homeassistant.helpers.dispatcher)). For example, you might store a primary API client object or shared structures in `hass.data[DOMAIN]`. If your integration needs to notify platform entities of new data (e.g. after an API update), use the Home Assistant dispatcher helper (`homeassistant.helpers.dispatcher`) to send signals to entities rather than calling entity methods directly ([Checklist for creating a component | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_component_code_review#:~:text=1,homeassistant.helpers.dispatcher)). This ensures thread-safe, asynchronous updates. 

- **Constants, Config Entries, and Translations**: Reuse existing constants from Home Assistant’s `homeassistant.const` wherever possible (for common things like units or CONF_* keys) ([Checklist for creating a component | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_component_code_review#:~:text=2,keep%20them%20on%20components%20level)). If you need new constants, define them in a `const.py` module in your integration; only add to the global constants if they are widely applicable ([Checklist for creating a component | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_component_code_review#:~:text=2,keep%20them%20on%20components%20level)). Manage configuration through **config entries**: for new integrations that connect to devices/services, implement a config flow (with UI) and avoid YAML configuration ([Integration configuration via YAML | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/configuration_yaml_index#:~:text=Integrations%20that%20communicate%20with%20devices,will%20no%20longer%20be%20accepted)). Home Assistant expects most device/service integrations to be configurable via the UI, and even legacy integrations are encouraged to add config flows and deprecate YAML ([Integration configuration via YAML | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/configuration_yaml_index#:~:text=Integrations%20that%20communicate%20with%20devices,will%20no%20longer%20be%20accepted)). In your code, use the `async_setup_entry` and `async_unload_entry` hooks to set up and tear down via config entries, and use the `ConfigEntry.data` for stored configuration. Provide an options flow if runtime options need to be adjustable. All user-facing strings in your integration should be translatable. Do not hard-code English names or messages in code – leverage Home Assistant’s localization system. For instance, the integration’s name, config flow prompts, error messages, device names, etc. should be defined in the `strings.json` and corresponding language files under your integration’s `translations/` folder ([Backend localization | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/internationalization/core#:~:text=The%20,that%20need%20to%20be%20translated)). This `strings.json` file contains keys for things like integration title, config flow texts, entity names, services, and more, which Home Assistant will use to display translated text to users ([Backend localization | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/internationalization/core#:~:text=The%20,that%20need%20to%20be%20translated)). For entities, avoid assigning a hard-coded name; instead allow the entity to have a default name that is translated or let the user set the name ([Entity | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/core/entity/#:~:text=represents%20the%20entity%20itself%20,should%20not%20be%20implemented%20by)). By maintaining proper translations and constants, your integration will be accessible to a global audience and consistent with others.

- **Deprecated/Legacy Patterns to Avoid**: *Ensure your integration does not use outdated practices that conflict with current standards.* Below are some patterns to avoid, with modern alternatives:  
  - **Hard-coded Requirements**: Do not use a `REQUIREMENTS` constant in your integration module to specify PyPI dependencies – this is deprecated. Instead, list all Python package requirements in your `manifest.json` (with pinned versions) ([Checklist for creating a component | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_component_code_review#:~:text=1,requirement%20meets%20the%20%2042)).  
  - **YAML-Only Configuration**: Avoid requiring users to configure devices/services via `configuration.yaml`. New integrations with devices **must** implement UI-based config flows (and older ones should migrate to config flows) ([Integration configuration via YAML | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/configuration_yaml_index#:~:text=Integrations%20that%20communicate%20with%20devices,will%20no%20longer%20be%20accepted)). YAML support for device integrations is generally discouraged and changes to legacy YAML configs are no longer accepted ([Integration configuration via YAML | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/configuration_yaml_index#:~:text=Integrations%20that%20communicate%20with%20devices,will%20no%20longer%20be%20accepted)).  
  - **Blocking I/O in Event Loop**: Do not call blocking APIs or perform file/network I/O in the synchronous context of Home Assistant’s event loop. For external device/service communication, use an external library (preferably one that supports async) and call it from async context or wrap sync calls with `hass.async_add_executor_job`. For example, don’t use `requests.get` directly in your integration; instead, use an async HTTP client or a dedicated library (as shown by using a separate `phue` library for Hue lights) ([Checklist for creating a component | Home Assistant Developer Docs](https://developers.home-assistant.io/docs/creating_component_code_review#:~:text=1,direct%20calls%20to%20the%20API)). This keeps Home Assistant responsive.  
  - **Deprecated Core APIs**: Stay updated with Home Assistant’s API changes and avoid using any deprecated functions. For instance, `hass.config_entries.async_forward_entry_setup` (used to forward config entry setup to platforms) is deprecated – use the newer `async_forward_entry_setups` (awaitable) instead for better efficiency ([Forwarding setup to config entry platforms | Home Assistant Developer Docs](https://developers.home-assistant.io/blog/2024/06/12/async_forward_entry_setups/#:~:text=Calling%20,executor%20job%20for%20each%20platform)). Keep an eye on deprecation warnings in the developer logs and release notes, and update your integration accordingly.  
  - **Bypassing the Logger**: Never use print statements or otherwise bypass the logging system for debugging output. Printing to stdout/stderr can disrupt Home Assistant’s log and is not thread-safe. Always use `_LOGGER` with appropriate log levels for any debug or info messages (as noted above).